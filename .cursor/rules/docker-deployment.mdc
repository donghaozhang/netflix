---
description:
globs:
alwaysApply: false
---
# Docker & Deployment Guide

## 🐳 Docker Configuration

The application is containerized using Docker for consistent deployment across environments.

## 🗂️ Key Files

### Docker Setup
- **Dockerfile**: [Dockerfile](mdc:Dockerfile) - Multi-stage container build configuration
- **Entry Script**: [entrypoint.sh](mdc:entrypoint.sh) - Container startup logic and process management
- **Nginx Config**: [nginx.conf](mdc:nginx.conf) - Web server configuration for production
- **Docker Ignore**: [.dockerignore](mdc:.dockerignore) - Files excluded from Docker context

### Environment Configuration
- **Example Env**: [.env.example](mdc:.env.example) - Template for environment variables
- **Frontend Env**: [frontend/.env](mdc:frontend/.env) - Frontend-specific environment
- **Backend Env**: [backend/.env](mdc:backend/.env) - Backend database configuration

### Deployment Scripts
- **Scripts Directory**: [scripts/](mdc:scripts/) - Deployment and utility scripts
- **Git Config**: [.gitconfig](mdc:.gitconfig) - Git configuration for container
- **Test Results**: [test_result.md](mdc:test_result.md) - Testing documentation

## 🚀 Deployment Options

### Option 1: Docker Compose (Recommended)
```bash
# Build and start all services
docker-compose up --build

# Run in background
docker-compose up -d --build

# View logs
docker-compose logs -f
```

### Option 2: Manual Docker Build
```bash
# Build the image
docker build -t netflix-app .

# Run the container
docker run -p 3000:3000 -p 8001:8001 netflix-app
```

### Option 3: Development Scripts
```bash
cd scripts
./update-and-start.sh
```

## 🏗️ Container Architecture

The Dockerfile uses a multi-stage build approach:

1. **Frontend Build Stage**: Builds React app for production
2. **Backend Setup**: Installs Python dependencies  
3. **Production Stage**: Combines frontend and backend with Nginx

## ⚙️ Process Management

The [entrypoint.sh](mdc:entrypoint.sh) script manages multiple processes:
- **Nginx**: Web server for static files and proxy
- **Backend**: FastAPI server on port 8001
- **Supervisor**: Process monitoring and management

## 🌐 Port Configuration

- **Frontend (Nginx)**: Port 3000
- **Backend (FastAPI)**: Port 8001
- **MongoDB**: Port 27017 (external dependency)

## 📋 Environment Variables

### Required for Production
```bash
# Backend
MONGO_URL="mongodb://localhost:27017"
DB_NAME="test_database"

# Frontend  
REACT_APP_API_URL="http://localhost:8001/api"
```

## 🔧 Nginx Configuration

The [nginx.conf](mdc:nginx.conf) provides:
- Static file serving for React app
- API proxy to FastAPI backend
- CORS headers for cross-origin requests
- Gzip compression for performance

## 📝 Production Logs

When running in production mode:
- **Backend logs**: `/var/log/supervisor/backend.out.log`
- **Frontend logs**: `/var/log/supervisor/frontend.out.log`
- **Nginx logs**: Standard nginx log locations

## 🐛 Troubleshooting

### Common Issues
1. **Port conflicts**: Ensure ports 3000 and 8001 are available
2. **MongoDB connection**: Verify MongoDB is running on localhost:27017
3. **Docker build failures**: Check [.dockerignore](mdc:.dockerignore) excludes
4. **Permission issues**: Ensure [entrypoint.sh](mdc:entrypoint.sh) is executable
